unit LoginSSO.Logic;

interface

uses
  System.SysUtils, System.Classes, IdHTTPServer, IdCustomHTTPServer, IdContext,
  System.Net.HttpClient, System.Net.URLClient, System.Net.HttpClientComponent
 , LoginSSO.User.Information, System.JSON;

type
  TMicrosoftSSO = class
  private
    { Private declarations }
    FHTTPServer: TIdHTTPServer;
    FClientID: string;
    FClientSecret: string;
    FTenantID: string;
    FRedirectURI: string;
    FAuthorizationCode: string;
    FAccessToken: string;


    procedure HTTPServerCommandGet(AContext: TIdContext; ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo);
    procedure RedirectToAuthorizationEndpoint;
    function ExecuteRequest(const AURL: string; const AParams: string; const AMethod: string; const AHeaders: TNetHeaders): string;
    function ResponseContentUserData: string;
    function ResponseContentAccessToken: string;
    function ParseJsonResponseUserData(AResponseContent: string): TSSOUserInformationModel;
    function ParseJsonResponseAccessToken(AResponseContent: string): string;

    function CreateHTTPComponents(out AHTTPClient: TNetHTTPClient; out AHTTPRequest: TNetHTTPRequest): TNetHTTPRequest;
    function ExecuteHTTPRequest(AHTTPRequest: TNetHTTPRequest; const AURL: string; const AParams: TStringStream; const AMethod: string; const AHeaders: TNetHeaders): IHTTPResponse;


  public
    { Public declarations }
    constructor Create(AClientID, ATenantID, ARedirectURI: string);
    destructor Destroy; override;
    procedure StartServer;
    procedure StopServer;
    function GetAccessToken: string;
    function GetAuthCode: string;
    procedure LogOut;

    function GetUserData: TSSOUserInformationModel;
  end;

implementation

uses
 Winapi.ShellAPI, Vcl.Dialogs, System.NetEncoding, Winapi.Windows
 , System.IOUtils, LoginSSO.Constants, LoginSSO.Messages, System.Generics.Collections;

 { TMicrosoftSSO }

constructor TMicrosoftSSO.Create(AClientID, ATenantID, ARedirectURI: string);
begin

  FClientID := AClientID;
  FTenantID := ATenantID;
  FRedirectURI := ARedirectURI;

  FHTTPServer := TIdHTTPServer.Create(nil);
  FHTTPServer.DefaultPort := DEFAULT_PORT;
  FHTTPServer.OnCommandGet := HTTPServerCommandGet;
end;

destructor TMicrosoftSSO.Destroy;
begin
  FHTTPServer.Free;
  inherited;
end;

procedure TMicrosoftSSO.StartServer;
begin
  FHTTPServer.Active := True;
  RedirectToAuthorizationEndpoint;
end;

procedure TMicrosoftSSO.StopServer;
begin
  FHTTPServer.Active := False;
end;

function TMicrosoftSSO.GetAuthCode: string;
begin
  if FAuthorizationCode <> EmptyStr then
  begin
    Result := FAuthorizationCode;
  end
  else
  begin
    Result := EmptyStr;
  end;

end;


procedure TMicrosoftSSO.HTTPServerCommandGet(AContext: TIdContext; ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo);
begin
  if ARequestInfo.Document = CALLBACK then
  begin
    FAuthorizationCode := ARequestInfo.Params.Values[CODE];
    AResponseInfo.ContentText := AUTHCODE_RECEIVED_MSG;
  end
  else
  begin
    AResponseInfo.ResponseNo := 404;
    AResponseInfo.ContentText := NOT_FOUND;
  end;
end;


procedure TMicrosoftSSO.RedirectToAuthorizationEndpoint;
var
  AuthURL: string;
begin
  AuthURL := Format(
    DEFAULT_MICROSOFTURL + AUTH_URL,
    [FTenantID, FClientID, TNetEncoding.URL.Encode(FRedirectURI)]);

  ShellExecute(0, OPEN, PChar(AuthURL), nil, nil, SW_SHOWNORMAL);
end;


function TMicrosoftSSO.ResponseContentUserData: string;
var
  LHeader: TNetHeaders;
begin
  SetLength(LHeader, 3);
  LHeader[AUTHORIZATION_NUM].Name := AUTHORIZATION;
  LHeader[AUTHORIZATION_NUM].Value := BEARER + FAccessToken;
  LHeader[ACCEPT_NUM].Name := ACCEPT;
  LHeader[ACCEPT_NUM].Value := APPLICATION_JSON;
  LHeader[USER_AGENT_NUM].Name := USER_AGENT;
  LHeader[USER_AGENT_NUM].Value := MOZILLA_CONST;

  Result := ExecuteRequest(MICROSOFT_GRAPH_URL, EmptyStr, GET, LHeader);
end;

function TMicrosoftSSO.ResponseContentAccessToken: string;
var
  LURL: string;
  LPostData: string;
begin

  LURL := DEFAULT_MICROSOFTURL + FTenantID + TOKEN_URL;
  LPostData := Format(
    TOKEN_BODY_URL,
    [TNetEncoding.URL.Encode(FClientID),
     TNetEncoding.URL.Encode(FClientSecret),
     TNetEncoding.URL.Encode(FRedirectURI),
     TNetEncoding.URL.Encode(FAuthorizationCode)]
  );

  Result := ExecuteRequest(LURL, LPostData, POST, []);
end;

function TMicrosoftSSO.ParseJsonResponseUserData(AResponseContent: string): TSSOUserInformationModel;
var
  LJSONObj: TJSONObject;
  LJSONArray: TJSONArray;
  I: Integer;
begin
  // Analizza la risposta JSON
  LJSONObj := TJSONObject.ParseJSONValue(AResponseContent) as TJSONObject;
  try
    if not Assigned(LJSONObj) then
      raise Exception.Create(JSON_PARSE_ERROR);

    Result := TSSOUserInformationModel.Create;

    // Salvo i valori che mi interessano dal oggetto JSON
    Result.DisplayName := LJSONObj.GetValue<string>(DISPLAYNAME);
    Result.GivenName := LJSONObj.GetValue<string>(GIVENNAME);
    Result.JobTitle := LJSONObj.GetValue<string>(JOBTITLE);
    Result.EMail := LJSONObj.GetValue<string>(EMAIL);
    Result.MobilePhone := LJSONObj.GetValue<string>(MOBILEPHONE);
    Result.OfficeLocation := LJSONObj.GetValue<string>(OFFICELOCATION);
    Result.PreferredLanguage := LJSONObj.GetValue<string>(PREFERREDLANGUAGE);
    Result.Surname := LJSONObj.GetValue<string>(SURNAME);
    Result.UserPrincipalName := LJSONObj.GetValue<string>(USERPRINCIPALNAME);
    Result.Id := LJSONObj.GetValue<string>(ID);


    LJSONArray := LJSONObj.GetValue<TJSONArray>(BUSINESSPHONES);

    if Assigned(LJSONArray) then
    begin
      for I := 0 to LJSONArray.Count - 1 do
      begin
        Result.BusinessPhones.Add(LJSONArray.Items[I].Value);
      end;
    end;

  finally
    LJSONObj.Free;
  end;
end;

function TMicrosoftSSO.ParseJsonResponseAccessToken(AResponseContent: string): string;
var
  LJSONObj: TJSONObject;
begin
  LJSONObj := TJSONObject.ParseJSONValue(AResponseContent) as TJSONObject;
  try
    if Assigned(LJSONObj) then
    begin
      //salvo il valore dell access token in una variabile private della classe
      FAccessToken := LJSONObj.GetValue<string>(ACCESS_TOKEN);
      Result := FAccessToken;
    end
    else
    begin
      raise Exception.Create(JSON_PARSE_ERROR);
    end;
  finally
    LJSONObj.Free;
  end;
end;



function TMicrosoftSSO.CreateHTTPComponents(out AHTTPClient: TNetHTTPClient; out AHTTPRequest: TNetHTTPRequest): TNetHTTPRequest;
begin
  AHTTPClient := TNetHTTPClient.Create(nil);
  AHTTPRequest := TNetHTTPRequest.Create(nil);
  AHTTPRequest.Client := AHTTPClient;
  Result := AHTTPRequest;
end;

function TMicrosoftSSO.ExecuteHTTPRequest(AHTTPRequest: TNetHTTPRequest; const AURL: string; const AParams: TStringStream; const AMethod: string; const AHeaders: TNetHeaders): IHTTPResponse;
begin
  if AMethod = POST then
  begin
    Result := AHTTPRequest.Post(AURL, AParams, nil, AHeaders);
  end
  else if AMethod = GET then
  begin
    Result := AHTTPRequest.Get(AURL, nil, AHeaders);
  end
  else
  begin
    raise Exception.Create(Format(UNSUPPORTED_METHOD_ERROR, [AMethod]));
  end;
end;

function TMicrosoftSSO.ExecuteRequest(const AURL: string; const AParams: string; const AMethod: string; const AHeaders: TNetHeaders): string;
var
  LHTTPClient: TNetHTTPClient;
  LHTTPRequest: TNetHTTPRequest;
  LResponse: IHTTPResponse;
  LParams: TStringStream;
begin
  Result := EmptyStr;
  CreateHTTPComponents(LHTTPClient, LHTTPRequest);
  try
    if AMethod = POST then
      LParams := TStringStream.Create(AParams, TEncoding.UTF8)
    else
      LParams := nil;

    try
      LResponse := ExecuteHTTPRequest(LHTTPRequest, AURL, LParams, AMethod, AHeaders);
      Result := LResponse.ContentAsString(TEncoding.UTF8);
    finally
      if Assigned(LParams) then
        LParams.Free;
    end;
  finally
    LHTTPRequest.Free;
    LHTTPClient.Free;
  end;
end;


function TMicrosoftSSO.GetAccessToken: string;
var
  LResponseContent: string;
begin
  Result := EmptyStr;

  LResponseContent := ResponseContentAccessToken;
  //gestione errori
  if FAuthorizationCode = EmptyStr then
    raise Exception.Create('Authorization Code not found.');

  Result := ParseJsonResponseAccessToken(LResponseContent);
end;


function TMicrosoftSSO.GetUserData: TSSOUserInformationModel;
var
  LResponseContent: string;
begin
  Result := nil;
  LResponseContent := ResponseContentUserData;
  //gestione errori

  if FAccessToken = EmptyStr then
    raise Exception.Create('Access Token not found');

  Result := ParseJsonResponseUserData(LResponseContent);
end;

procedure TMicrosoftSSO.Logout;
var
  LogoutURL: string;
begin
  FAccessToken := EmptyStr;
  // Redirect to Microsoft's logout URL
  LogoutURL := DEFAULT_MICROSOFTURL + LOGOUT_URL + TNetEncoding.URL.Encode(FRedirectURI);
  ShellExecute(0, OPEN, PChar(LogoutURL), nil, nil, SW_SHOWNORMAL);
end;


end.

