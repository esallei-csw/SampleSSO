unit LoginSSO.Logic;

interface

uses
  System.SysUtils, System.Classes, IdHTTPServer, IdCustomHTTPServer, IdContext,
  System.Net.HttpClient, System.Net.URLClient, System.Net.HttpClientComponent
 , LoginSSO.User.Information, System.JSON, LoginSSO.Utils, LoginSSO.WebView;

type
  TMicrosoftSSO = class
  private
    { Private declarations }
    FHTTPServer: TIdHTTPServer;
    FClientID: string;
    FClientSecret: string;
    FTenantID: string;
    FRedirectURI: string;
    FAuthorizationCode: string;
    FAccessToken: string;
    FLoggedIn: boolean;
    FAuthURL: string;
    FUtils : TSSOUtils;
    FWebForm: TWebViewForm;

    procedure HTTPServerCommandGet(AContext: TIdContext; ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo);

    function ExecuteRequest(const AURL: string; const AParams: string; const AMethod: string; const AHeaders: TNetHeaders): IHTTPResponse;
    function ResponseContentUserData: IHTTPResponse;
    function ResponseContentAccessToken: IHTTPResponse;
    function ParseJsonResponseUserData(AResponseContent: string): TSSOUserInformationModel;
    function ParseJsonResponseAccessToken(AResponseContent: string): string;

    function CreateHTTPComponents(out AHTTPClient: TNetHTTPClient; out AHTTPRequest: TNetHTTPRequest): TNetHTTPRequest;
    function ExecuteHTTPRequest(AHTTPRequest: TNetHTTPRequest; const AURL: string; const AParams: TStringStream; const AMethod: string; const AHeaders: TNetHeaders): IHTTPResponse;

    function ParseJsonErrorAccessToken(AResponse: string): string;
    procedure ParseJsonErrorUserData(AResponse: string);

    function GetWebForm: TWebViewForm;
    function GetUtils: TSSOUtils;
    procedure InvalidateCodeAndToken;
    function GetLogoutURL: string;

    property Utils: TSSOUtils read GetUtils write FUtils;
    property WebForm: TWebViewForm read GetWebForm write FWebForm;


  public
    { Public declarations }
    constructor Create(AClientID, ATenantID, ARedirectURI: string);
    destructor Destroy; override;
    procedure StopServer;
    function GetAccessToken: string;
    function GetAuthCode: string;
    procedure LogOut;
    function AutoLogout: boolean;
    function GetUserData: TSSOUserInformationModel;
    function GetAuthURL: string;
    procedure OpenBrowser(AURL: string);

    function LogIn: TSSOUserInformationModel;

    function WebViewLogin: TSSOUserInformationModel;
    procedure WebViewLogout;

    property LoggedIn : boolean read FLoggedIn write FLoggedIn;
  end;

implementation

uses
 Winapi.ShellAPI, Vcl.Dialogs, System.NetEncoding, Winapi.Windows
 , System.IOUtils, LoginSSO.Constants, LoginSSO.Messages, System.Generics.Collections;

 { TMicrosoftSSO }

function TMicrosoftSSO.AutoLogout;
var
  LResponse: IHTTPResponse;
  LPostData: string;
begin
  Result := False;

  LPostData := Format('client_id=%s&token=%s&token_type_hint=access_token', [TNetEncoding.URL.Encode(FClientID), TNetEncoding.URL.Encode(FAccessToken)]);

  LResponse := ExecuteRequest(DEFAULT_MICROSOFTURL + FTenantID + LOGOUT_URL, LPostData, POST, []);
  if not Assigned(LResponse) then
    raise Exception.Create(HTTP_RESPONSE_ERROR);
  //TO-DO gestione errori...

  //la risposta sarà sempre 200 ma non vuol dire che abbia effettivamente fatto il logout
  if LResponse.StatusCode = HTTP_STATUS_OK then
    begin
      Result := True;
      LoggedIn := False;
      //invalidate the auth code and access token
      InvalidateCodeAndToken;
    end;
end;

constructor TMicrosoftSSO.Create(AClientID, ATenantID, ARedirectURI: string);
begin

  FClientID := AClientID;
  FTenantID := ATenantID;
  FRedirectURI := ARedirectURI;

  //creo e avvio il server
  FHTTPServer := TIdHTTPServer.Create(nil);
  FHTTPServer.DefaultPort := DEFAULT_PORT;
  FHTTPServer.OnCommandGet := HTTPServerCommandGet;
  FHTTPServer.Active := True;

  FAuthURL := Format(
    DEFAULT_MICROSOFTURL + AUTH_URL,
    [FTenantID, FClientID, TNetEncoding.URL.Encode(FRedirectURI)]);

  LoggedIn := false;
end;

destructor TMicrosoftSSO.Destroy;
begin
  FHTTPServer.Free;
  inherited;
end;

procedure TMicrosoftSSO.StopServer;
begin
  FHTTPServer.Active := False;
end;

function TMicrosoftSSO.GetWebForm: TWebViewForm;
begin
  if not Assigned(FWebForm) then
    WebForm := TWebViewForm.Create(nil);
  Result := FWebForm;
end;

function TMicrosoftSSO.WebViewLogin: TSSOUserInformationModel;
begin
  if LoggedIn then
    raise Exception.Create(ALREADY_LOGGED);
  //faccio vedere il form webview per poter autenticare l utente
  WebForm.LoadURL(FAuthURL);
  WebForm.Show;
  //aspetto che il codice di autorizzazione venga ritornato
  while GetAuthCode = EmptyStr do
  begin
    Utils.Delay(DEFAULT_SLEEP_TIME);
  end;
  //chiudo automaticamente la webview dopo che è avvenuta l autenticazione
  WebForm.Close;
  //Prendo il token di accesso
  GetAccessToken;
  //Ritorno i dati utente prendendoli tramite access token
  Result := GetUserData;

  LoggedIn := true;
end;

procedure TMicrosoftSSO.WebViewLogout;
begin
  if not LoggedIn then
    raise Exception.Create(NOT_LOGGED);
  //apro la webForm per eseguire il logout dell utente
  WebForm.LoadURL(GetLogoutURL);
  WebForm.Show;
  //funzione per cliccare in automatico l utente per la disconnessione
  WebForm.InjectJavascript;
  //aspetto che l operazione venga effettuata prima di chiudere il web form
  Utils.Delay(100);
  WebForm.Close;
  //invalido l auth code e l access token
  InvalidateCodeAndToken;

  LoggedIn := False;
end;

function TMicrosoftSSO.GetAuthCode: string;
begin
  Result := FAuthorizationCode;
end;

function TMicrosoftSSO.GetAuthURL: string;
begin
  Result := FAuthURL;
end;

function TMicrosoftSSO.GetLogoutURL: string;
begin
  Result := DEFAULT_MICROSOFTURL + FTenantID + LOGOUT_URL;
end;

procedure TMicrosoftSSO.HTTPServerCommandGet(AContext: TIdContext; ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo);
begin
  if ARequestInfo.Document = CALLBACK then
  begin
    FAuthorizationCode := ARequestInfo.Params.Values[CODE];
    AResponseInfo.ContentText := CALLBACK_HTML_PAGE;
  end
  else
  begin
    AResponseInfo.ResponseNo := HTTP_STATUS_NOT_FOUND;
    AResponseInfo.ContentText := NOT_FOUND;
  end;
end;


procedure TMicrosoftSSO.InvalidateCodeAndToken;
begin
  FAuthorizationCode := EmptyStr;
  FAccessToken := EmptyStr;
end;

procedure TMicrosoftSSO.OpenBrowser(AURL: string);
begin
    ShellExecute(0, OPEN, PChar(AURL), nil, nil, SW_SHOWNORMAL);
end;


function TMicrosoftSSO.ResponseContentUserData: IHTTPResponse;
var
  LHeader: TNetHeaders;
begin
  SetLength(LHeader, 3);
  LHeader[AUTHORIZATION_NUM].Name := AUTHORIZATION;
  LHeader[AUTHORIZATION_NUM].Value := BEARER + FAccessToken;
  LHeader[ACCEPT_NUM].Name := ACCEPT;
  LHeader[ACCEPT_NUM].Value := APPLICATION_JSON;
  LHeader[USER_AGENT_NUM].Name := USER_AGENT;
  LHeader[USER_AGENT_NUM].Value := MOZILLA_CONST;

  Result := ExecuteRequest(MICROSOFT_GRAPH_URL, EmptyStr, GET, LHeader);
end;

function TMicrosoftSSO.ResponseContentAccessToken: IHTTPResponse;
var
  LURL: string;
  LPostData: string;
begin

  LURL := DEFAULT_MICROSOFTURL + FTenantID + TOKEN_URL;
  LPostData := Format(
    TOKEN_BODY_URL,
    [TNetEncoding.URL.Encode(FClientID),
     TNetEncoding.URL.Encode(FClientSecret),
     TNetEncoding.URL.Encode(FRedirectURI),
     TNetEncoding.URL.Encode(FAuthorizationCode)]
  );

  Result := ExecuteRequest(LURL, LPostData, POST, []);
end;

function TMicrosoftSSO.ParseJsonResponseUserData(AResponseContent: string): TSSOUserInformationModel;
var
  LJSONObj: TJSONObject;
  LJSONArray: TJSONArray;
  I: Integer;
begin
  // Analizza la risposta JSON
  LJSONObj := TJSONObject.ParseJSONValue(AResponseContent) as TJSONObject;
  try
    if not Assigned(LJSONObj) then
      raise Exception.Create(JSON_PARSE_ERROR);

    Result := TSSOUserInformationModel.Create;

    // Salvo i valori che mi interessano dal oggetto JSON
    Result.DisplayName := LJSONObj.GetValue<string>(DISPLAYNAME);
    Result.GivenName := LJSONObj.GetValue<string>(GIVENNAME);
    Result.JobTitle := LJSONObj.GetValue<string>(JOBTITLE);
    Result.EMail := LJSONObj.GetValue<string>(EMAIL);
    Result.MobilePhone := LJSONObj.GetValue<string>(MOBILEPHONE);
    Result.OfficeLocation := LJSONObj.GetValue<string>(OFFICELOCATION);
    Result.PreferredLanguage := LJSONObj.GetValue<string>(PREFERREDLANGUAGE);
    Result.Surname := LJSONObj.GetValue<string>(SURNAME);
    Result.UserPrincipalName := LJSONObj.GetValue<string>(USERPRINCIPALNAME);
    Result.Id := LJSONObj.GetValue<string>(ID);


    LJSONArray := LJSONObj.GetValue<TJSONArray>(BUSINESSPHONES);

    if Assigned(LJSONArray) then
    begin
      for I := 0 to LJSONArray.Count - 1 do
      begin
        Result.BusinessPhones.Add(LJSONArray.Items[I].Value);
      end;
    end;

  finally
    LJSONObj.Free;
  end;
end;

function TMicrosoftSSO.ParseJsonResponseAccessToken(AResponseContent: string): string;
var
  LJSONObj: TJSONObject;
begin
  LJSONObj := TJSONObject.ParseJSONValue(AResponseContent) as TJSONObject;
  try
    if  not Assigned(LJSONObj) then
      raise Exception.Create(JSON_PARSE_ERROR);

    Result := LJSONObj.GetValue<string>(ACCESS_TOKEN);

  finally
    LJSONObj.Free;
  end;
end;

function TMicrosoftSSO.CreateHTTPComponents(out AHTTPClient: TNetHTTPClient; out AHTTPRequest: TNetHTTPRequest): TNetHTTPRequest;
begin
  AHTTPClient := TNetHTTPClient.Create(nil);
  AHTTPRequest := TNetHTTPRequest.Create(nil);
  AHTTPRequest.Client := AHTTPClient;
  Result := AHTTPRequest;
end;

function TMicrosoftSSO.ExecuteHTTPRequest(AHTTPRequest: TNetHTTPRequest; const AURL: string; const AParams: TStringStream; const AMethod: string; const AHeaders: TNetHeaders): IHTTPResponse;
begin
  if AMethod = POST then
  begin
    Result := AHTTPRequest.Post(AURL, AParams, nil, AHeaders);
  end
  else if AMethod = GET then
  begin
    Result := AHTTPRequest.Get(AURL, nil, AHeaders);
  end
  else
  begin
    raise Exception.Create(Format(UNSUPPORTED_METHOD_ERROR, [AMethod]));
  end;
end;



function TMicrosoftSSO.ExecuteRequest(const AURL: string; const AParams: string; const AMethod: string; const AHeaders: TNetHeaders): IHTTPResponse;
var
  LHTTPClient: TNetHTTPClient;
  LHTTPRequest: TNetHTTPRequest;
  LParams: TStringStream;
begin
  Result := nil;
  CreateHTTPComponents(LHTTPClient, LHTTPRequest);
  try
    if AMethod = POST then
      LParams := TStringStream.Create(AParams, TEncoding.UTF8)
    else
      LParams := nil;

    try
      Result := ExecuteHTTPRequest(LHTTPRequest, AURL, LParams, AMethod, AHeaders);
    finally
      if Assigned(LParams) then
        LParams.Free;
    end;
  finally
    LHTTPRequest.Free;
    LHTTPClient.Free;
  end;
end;

function TMicrosoftSSO.ParseJsonErrorAccessToken(AResponse: string): string;
var
  LJSONObj: TJSONObject;
  LJSONValue: TJSONValue;
begin
  LJSONValue := TJSONObject.ParseJSONValue(AResponse);
  if  not Assigned(LJSONValue) then
  begin
    Result := JSON_PARSE_ERROR;
    exit;
  end;

  try
     LJSONObj := LJSONValue as TJSONObject;

     Result := LJSONObj.GetValue<string>(ERROR) + ' ' + LJSONObj.GetValue<string>(ERROR_DESCRIPTION);

  finally
      LJSONValue.Free;
  end;

end;

procedure TMicrosoftSSO.ParseJsonErrorUserData(AResponse: string);
var
  LJSONObj: TJSONObject;
begin
  LJSONObj := TJSONObject.ParseJSONValue(AResponse) as TJSONObject;
  try
    if  not Assigned(LJSONObj) then
      raise Exception.Create(JSON_PARSE_ERROR);

    LJSONObj := LJSONObj.GetValue<TJSONObject>(ERROR);
    raise Exception.Create(LJSONObj.GetValue<string>(CODE) + ' ' + LJSONObj.GetValue<string>(MESSAGE));

  finally
    LJSONObj.Free;
  end;
end;

function TMicrosoftSSO.GetAccessToken: string;
var
  LResponse: IHTTPResponse;
begin
  Result := EmptyStr;

  LResponse := ResponseContentAccessToken;
  if not Assigned(LResponse) then
    raise Exception.Create(HTTP_RESPONSE_ERROR);
  //gestione errori
  if LResponse.StatusCode <> HTTP_STATUS_OK then
    raise Exception.Create(ParseJsonErrorAccessToken(LResponse.ContentAsString(FUtils.GetEncoding)));

  FAccessToken := ParseJsonResponseAccessToken(LResponse.ContentAsString(FUtils.GetEncoding));

  Result := FAccessToken;
end;

function TMicrosoftSSO.GetUserData: TSSOUserInformationModel;
var
  LResponse: IHTTPResponse;
begin
  Result := nil;

  LResponse := ResponseContentUserData;
  if not Assigned(LResponse) then
    raise Exception.Create(HTTP_RESPONSE_ERROR);
  //gestione errori
  if LResponse.StatusCode <> HTTP_STATUS_OK then
    ParseJsonErrorUserData(LResponse.ContentAsString(FUtils.GetEncoding));

  Result := ParseJsonResponseUserData(LResponse.ContentAsString(FUtils.GetEncoding));
end;

function TMicrosoftSSO.GetUtils: TSSOUtils;
begin
  if not Assigned(FUtils) then
    FUtils := TSSOUtils.Create;
  Result := FUtils;
  end;

procedure TMicrosoftSSO.Logout;
begin
  if not LoggedIn then
    raise Exception.Create(NOT_LOGGED);

  //invalidate the auth code and access token
  InvalidateCodeAndToken;

  // Redirect to Microsoft's logout URL
  OpenBrowser(GetLogoutURL);

  LoggedIn := false;
end;

function TMicrosoftSSO.LogIn: TSSOUserInformationModel;
begin
  if LoggedIn then
    raise Exception.Create(ALREADY_LOGGED);
  //apro la pagina di autorizzazione
  OpenBrowser(FAuthURL);
  //aspetto che il codice di autorizzazione venga ritornato
  while FAuthorizationCode = EmptyStr do
    FUtils.Delay(DEFAULT_SLEEP_TIME);
  //Prendo il token di accesso
  GetAccessToken;
  //Ritorno i dati utente prendendoli tramite access token
  Result := GetUserData;

  LoggedIn := true;
end;

end.

